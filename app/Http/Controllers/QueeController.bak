<?php

namespace App\Http\Controllers;

use App\quee;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use DB;
use App\contact;
use App\text;
use App\wgsms;
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;


class QueeController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        	
	$texts = text::where(array('qued'=>1,'status'=>'published'))->orderBy('text_id','asc')->first();
		
	if($texts){
			 
		## UPDATE TO PREPROCESSING STATE
		$texts->qued = 3;
		$texts->save();

		$from_source=$texts->from_source;
		if($from_source=='contact_list' || $from_source=='csv_upload'){	
			$contacts = contact::find($texts->contacts_id);

			
			if($contacts->contacts_from=="csv"){
				$shortcodes=json_decode($contacts->csv_file_columns);

				$csv_file=$contacts->csv_file;
				$row = 1;
				
				$send_list = array();
				$msg_list = array();
				$batch_counter = 0;
				$batch_list = array();

				if (($handle = fopen($csv_file, "r")) !== FALSE) {				
				  while (($data = fgetcsv($handle, '', ",")) !== FALSE) {
					   $telephone_column='';
					$num = count($data);
					//echo "<p> $num fields in line $row: <br /></p>\n";
					$phone_no='';
					$columns_in_csv=array();
					
					for ($c=0; $c < $num; $c++){ 
						$columns_in_csv[$c]=$data[$c];
						if($c==$contacts->csv_contacts_column){	$phone_no=$data[$c];}
					}
					
					$data = array();
					if($row>1){
						
						//echo "<pre>";
						
						$no_of_columns_in_csv=count($shortcodes);
						$message=$texts->message;
  							 
						for ($x = 0; $x <= $no_of_columns_in_csv-1; $x++) {

							 $field_tag = "{".$shortcodes[$x]."}";
							 $message = str_replace($field_tag,$columns_in_csv[$x],$message);
						} 

						$sms_info=array(
								'text_id'=>$texts->text_id,
								'uid'=>Str::orderedUuid(),
								'phone_no'=>wgsms::clean_phone_number($phone_no),
								'message'=>str_replace('/',"//",addslashes($message)),
								'created_at'=>date("Y-m-d H:i:s"),
						);

						## BATCH LIST COMPILER
						if($batch_counter == 29){

							## ADD THE CURRENT ROW
							array_push($batch_list,$sms_info);
							## INSERT INTO DB
							DB::table('quees')->insert($batch_list);
							##PUBLISH TO QUEUE
							## REMOVE UNCESSARY FIELDS FOR THE QUEUE
							$qlist = $batch_list;
							unset($qlist['text_id']);
							unset($qlist['created_at']);

							$this->postToQueue($qlist);
							$qlist = null;

							$batch_counter = 0;
							$batch_list = [];
						}
						else{
							array_push($batch_list,$sms_info);
							$batch_counter ++;
						}
						
					}
						
					$row++;
				  }

					if( ($batch_counter < 29) && ($batch_counter > 0) ){
							## INSERT INTO DB
							DB::table('quees')->insert($batch_list);

							##PUBLISH TO QUEUE
							$qlist = $batch_list;
							unset($qlist['text_id']);
							unset($qlist['created_at']);
							$this->postToQueue($qlist);
							$batch_counter = 0;
							$batch_list = [];
					}


				  fclose($handle);
				  echo $row." Rows processed.";
				}
			}

			if($contacts->contacts_from=="phone_book"){
				$contacts_details=json_decode($contacts->phone_book_contacts);
				
				$phone_book_colums=json_decode($contacts->phone_book_columns);
				$no_of_columns_count=count($phone_book_colums);

				## INITIALIZE SMS QUEUEING VARIABLES
				$batch_list = array();
				
				foreach($contacts_details as $contact){
					
						$phone_no=$contact->phone;
						$message=$texts->message;
						$contacts_array =  (array) $contact;
						
						foreach($phone_book_colums as $phone_book_colum){
							 
							 $field_tag = "{".$phone_book_colum."}";
							 $contact_field=$contacts_array[$phone_book_colum];
							 $message = str_replace($field_tag, $contact_field,$message);
						} 
						
						$sms_info=array(
								'text_id'=>$texts->text_id,
								'uid'=>Str::orderedUuid(),
								'phone_no'=>wgsms::clean_phone_number($phone_no),
								'message'=>str_replace('/',"//",addslashes($message)),
								'created_at'=>date("Y-m-d H:i:s"),
						);
						array_push($batch_list,$sms_info);
				}
				## POST TO RABBITMQ AND MYSQL
				DB::table('quees')->insert($batch_list);
				##PUBLISH TO QUEUE
				## REMOVE UNCESSARY FIELDS FOR THE QUEUE
				$qlist = $batch_list;
				unset($qlist['text_id']);
				unset($qlist['created_at']);

				$this->postToQueue($qlist);
				$qlist = null;
			}

		}
		
		if($texts->from_source=="recepient_contacts"){
			## INITIALIZE SMS QUEUEING VARIABLES
			$batch_list = array();

			$contacts = explode(',', $texts->recepient_contacts	);
			$trimmed_contacts = array_map('trim',$contacts);
			foreach($trimmed_contacts as $phone_no){
					$sms_info=array(
						'text_id'=>$texts->text_id,
						'uid'=>Str::orderedUuid(),
						'phone_no'=>wgsms::clean_phone_number($phone_no),
						'message'=>str_replace('/',"//",addslashes($texts->message)),
						'created_at'=>date("Y-m-d H:i:s"),
					);
					array_push($batch_list,$sms_info);
					## $insert_id=DB::table('quees')->insertGetId($sms_info);
			}

			## POST TO RABBITMQ AND MYSQL
			DB::table('quees')->insert($batch_list);
			##PUBLISH TO QUEUE
			## REMOVE UNCESSARY FIELDS FOR THE QUEUE
			$qlist = $batch_list;
			unset($qlist['text_id']);
			unset($qlist['created_at']);

			$this->postToQueue($qlist);
			$qlist = null;
		}
		$texts->qued=2;
		$texts->save();
	}
		
		
		
		
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\quee  $quee
     * @return \Illuminate\Http\Response
     */
    public function show(quee $quee)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\quee  $quee
     * @return \Illuminate\Http\Response
     */
    public function edit(quee $quee)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\quee  $quee
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, quee $quee)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\quee  $quee
     * @return \Illuminate\Http\Response
     */
    public function destroy(quee $quee)
    {
        //
    }

	public function postToQueue($payload){
		## ENCODE THE MSG IN JSON
		$search = array("\n", "\r", "\u", "\t", "\f", "\b", "/", '"');
		$replace = array("\\n", "\\r", "\\u", "\\t", "\\f", "\\b", "\/", "\"");
		$serialized_msg = json_encode($payload);
		$serializedmsg = str_replace($search, $replace, $serialized_msg);
		$exchange = 'external';
		$que = 'smstest2';
		$routing_key = 'send_out';

		## Instantiate connection
		$qcon = new AMQPStreamConnection(
			config('rabbitmq.host'),
			config('rabbitmq.port'),
			config('rabbitmq.user'),
			config('rabbitmq.key')
		);
		$qchannel = $qcon->channel();
		## DEFINE AN EXCHANGE
		$qchannel->exchange_declare( $exchange,config('rabbitmq.exchange_type'), false,true,false );
		## CREATE A QUEUE
		$qchannel->queue_declare($que,false,true,false,false);
		## BIND THE QUEUE TO THE EXCHANGE
		$qchannel->queue_bind($que,$exchange);

		$msg_xtics = array(
			'content_type' => 'application/json',
			'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT
		);

		$msg = new AMQPMessage($serializedmsg,$msg_xtics);
		#$r = $qchannel->basic_publish($msg,$exchange,$routing_key);
		$r = $qchannel->basic_publish($msg,$exchange);

		$qchannel->close();
		$qcon->close();
		return true;
	}
}
